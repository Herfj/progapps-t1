package logica.formacion;

import java.util.List;
import javax.persistence.EntityManager;
import javax.persistence.EntityManagerFactory;
import javax.persistence.Persistence;

import logica.entidades.Curso;
import logica.entidades.Formacion;

public class AgregarCursoAFormacion {

    private String nom_for;

    public AgregarCursoAFormacion(String nombreFormacion) {
        nom_for = nombreFormacion;
    }

    private String hasErrorNotExists() {
        ExisteFormacion existeFormacion = new ExisteFormacion();
        if (!existeFormacion.existeFormCur(nom_for))
            return "ERROR: NO existe la formacion con ese nombre: " + nom_for + " \n";
        return "";
    }

    public String agregarCursosAFor(List<String> nombreCursos) {

        String retorno = "";
        List<Curso> cursos = new ArrayList();

        if (retorno.isEmpty()) {

            if (!nombreCursos.isEmpty()) {

                ObtenerCurso oc = new ObtenerCurso();
                for (String cursoString : nombreCursos) {
                    Curso cursoFor = oc.getCurso(cursoString);
                    if (cursoFor == null) {
                        return retorno + "ERROR: No existe el curso: " + cursoString
                                + ", por favor ingrese un curso existente!\n";
                    }

                    cursos.add(cursoFor);
                }
            }
        }

        if (hasErrorNotExists().isEmpty()) {
            EntityManagerFactory emfactory = Persistence.createEntityManagerFactory("CursoJPA");
            EntityManager entitymanager = emfactory.createEntityManager();
            entitymanager.getTransaction().begin();

            Formacion form = entitymanager.find(Formacion.class, nom_for);

            for (Curso cursito : cursos) {
                form.addCurso(cursito);
            }

            entitymanager.getTransaction().commit();

            entitymanager.close();
            emfactory.close();
        } else {
            return hasErrorNotExists();
        }
    }
}